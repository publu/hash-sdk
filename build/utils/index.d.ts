import BigNumber from "bignumber.js";
export declare const util: {
    stringToBytes: (s: string) => Uint8Array;
    stringToBytesSize: (s: string) => number;
    getAccountIdObjectFull: (id: string | number | Object, type?: string) => Object;
    getAccountIdLikeToObj: (id: string, type?: string) => object;
    getAccountObjToIdLike: (id: Object) => string;
    getFriendlyErrorObject: (e: any) => Object;
    sumFromRecipientList: (recipientList: any) => number;
    normalizeArrayValues: (arr: string[]) => any[];
    convertIfArray: (value: any) => any;
    getBool: (val: any) => boolean;
    toBigNumber: (n: any) => BigNumber;
    accountIdToHexAddress: (accountId: string) => string;
    createStringArray: (arr: any) => any;
    createNumberArray: (arr: any) => number[];
    createBigNumberArray: (arr: any) => BigNumber[];
    hexToAccountID: (hexString: string) => string;
    hexToDecimal: (hexString: string) => number;
    hexToString: (hex: string) => string;
    getConstructorFromAbi: (abi: any) => void;
    copyBytes: (start: number, length: number, bytes: any) => Uint8Array;
    getMimetype: (signature: any) => "image/png" | "image/gif" | "application/pdf" | "image/jpeg" | "application/zip" | "Unknown filetype";
    detectFileType: (buffer: Uint8Array) => "image/png" | "image/gif" | "application/pdf" | "image/jpeg" | "application/zip" | "Unknown filetype";
    svgToUrlGenerator: (svg: string) => string;
    checkEnvironment: () => "client" | "server";
    setStoreData: (value: any, type: string) => void;
    getStoreData: (key: string) => any;
};
